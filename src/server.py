import uvicorn
from fastapi import FastAPI, HTTPException, Body
from fastapi.middleware.cors import CORSMiddleware
from src.italy_collection.data_collection import run_sensor_pipeline

from src.config import logger, public_or_local



if public_or_local == 'LOCAL':
    url = 'http://localhost'
else:
    url = 'http://11.11.11.11'

origins = [
    url
]

docs_url = "/data_collection"

app = FastAPI(docs_url=docs_url, openapi_url=f'{docs_url}/openapi.json')
app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


@app.post(f"{docs_url}/italy_data_collection_pipeline")
async def run_pipeline():
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π ETL-–ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å –∏—Ç–∞–ª—å—è–Ω—Å–∫–∏—Ö –¥–∞—Ç—á–∏–∫–æ–≤.

    –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:
    1. –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –¥–∞—Ç—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã `load_consumption` –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    2. –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –≤–Ω–µ—à–Ω–µ–≥–æ API, –Ω–∞—á–∏–Ω–∞—è —Å —ç—Ç–æ–π –¥–∞—Ç—ã –∏ –¥–æ —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞.
    3. –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö: —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π.
    4. –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –ø–æ –¥–∞—Ç–µ (`UPSERT`).

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        str: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö.

    –ò—Å–∫–ª—é—á–µ–Ω–∏—è:
        –ü–æ–¥–Ω–∏–º–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è, –µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –æ—à–∏–±–∫–∞ –Ω–∞ –ª—é–±–æ–º —ç—Ç–∞–ø–µ –ø–∞–π–ø–ª–∞–π–Ω–∞.

    –ü—Ä–∏–º–µ—Ä –≤—ã–∑–æ–≤–∞ Python:

        import requests

        url = "http://your-api-host/docs_url/run_sensor_pipeline"  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π URL —Ä—É—á–∫–∏

        try:
            response = requests.post(url)
            response.raise_for_status()
            data = response.json()
            print("–†–µ–∑—É–ª—å—Ç–∞—Ç:", data.get("message"))
        except requests.HTTPError as http_err:
            print(f"HTTP –æ—à–∏–±–∫–∞: {http_err}")
        except Exception as err:
            print(f"–û—à–∏–±–∫–∞: {err}")
    """
    try:
        result = run_sensor_pipeline()
        print(result)
        return {"message": result}
    except Exception as e:
        import traceback
        error_trace = traceback.format_exc()
        logger.error(error_trace)
        raise HTTPException(
            status_code=500,
            detail=f"Pipeline execution failed: {str(e)}",
            headers={"X-Error": str(e)},
        )



@app.get("/")
def read_root():
    return {"message": "Welcome to the indicators System API"}


if __name__ == "__main__":
    port = 7077
    print(f'üöÄ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è http://0.0.0.0:{port}{docs_url}')
    uvicorn.run("server:app", host="0.0.0.0", port=port, workers=4, log_level="debug")
